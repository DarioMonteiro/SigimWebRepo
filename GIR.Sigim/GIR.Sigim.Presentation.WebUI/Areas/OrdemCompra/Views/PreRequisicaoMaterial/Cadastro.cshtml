@model GIR.Sigim.Presentation.WebUI.Areas.OrdemCompra.ViewModel.PreRequisicaoMaterialCadastroViewModel

@{
    ViewBag.Title = "Pré-requisição de material";
}

@Html.Partial("_NotificationMessagesPartial")
<div class="row" style="margin: 0 0 13px 0;">
    @{
        string disablebtnAprovarItem = string.Empty;
        if (!Model.PodeAprovarItem)
        {
            disablebtnAprovarItem = "disabled";
        }
    }
    <button id="btnAprovarItem" type="button" class="btn btn-primary @disablebtnAprovarItem">
        Aprovar Pré-requisição
    </button>
</div>
<div class="row">
    <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable centerBox">
        <div class="jarviswidget" id="wid-id-1" data-widget-editbutton="false" data-widget-custombutton="false">
            <header>
                <span class="widget-icon"><i class="fa fa-cog"></i></span>
                <h2>@ViewBag.Title</h2>
            </header>
            <div>
                <div class="widget-body no-padding">
                    @using (Ajax.BeginForm(
                        "Cadastro",
                        "PreRequisicaoMaterial",
                        null,
                        new AjaxOptions() { InsertionMode = InsertionMode.Replace, HttpMethod = "POST", OnSuccess = "onSuccess", UpdateTargetId = "notificationMessages" },
                        new { @id = "formCadastro", @class = "smart-form client-form", @novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()
                        <fieldset>
                            <div class="row">
                                <section class="col col-3">
                                    @Html.LabelFor(m => m.PreRequisicaoMaterial.Id, new { @class = "label" })
                                    <label class="input">
                                        @Html.TextBoxFor(m => m.PreRequisicaoMaterial.Id, new { @readonly = "", @class = "readonly" })
                                    </label>
                                </section>
                                <section class="col col-3">
                                    @Html.LabelFor(m => m.PreRequisicaoMaterial.Data, new { @class = "label" })
                                    <label class="input">
                                        <i class="icon-append fa fa-calendar"></i>
                                        @Html.TextBoxFor(m => m.PreRequisicaoMaterial.Data, "{0:dd/MM/yyyy}")
                                    </label>
                                    @Html.ValidationMessageFor(m => m.PreRequisicaoMaterial.Data, "Informe uma data válida.", new { @class = "note note-error" })
                                </section>
                                <script type="text/javascript">
                                    $(document).ready(function () {
                                        $('#@Html.IdFor(m => m.PreRequisicaoMaterial.Data)').datepicker({
                                            prevText: '<i class="fa fa-chevron-left"></i>',
                                            nextText: '<i class="fa fa-chevron-right"></i>',
                                            changeMonth: true,
                                            changeYear: true,
                                            onClose: function (selectedDate) {
                                                $(this).valid();
                                            }
                                        });
                                    });
                                </script>
                                <section class="col col-4">
                                    @Html.LabelFor(m => m.PreRequisicaoMaterial.SituacaoDescricao, new { @class = "label" })
                                    <label class="input">
                                        @Html.TextBoxFor(m => m.PreRequisicaoMaterial.SituacaoDescricao, new { @readonly = "", @class = "readonly" })
                                    </label>
                                </section>
                            </div>
                            @Html.HiddenFor(m => m.JsonItens)
                        </fieldset>
                        <fieldset id="formItem">
                            @Html.HiddenFor(m => m.ItemId)
                            @Html.HiddenFor(m => m.Sequencial)
                            <div class="row">
                                @Html.EditorFor(m => m.CentroCusto, "CentroCusto", new { @sectionClass = "col col-3", @labelText = "Centro de Custo", @somenteNivelFolha = true, @required = true })
                                @Html.EditorFor(m => m.Classe, "Classe", new { @sectionClass = "col col-3", @somenteNivelFolha = true, @required = true, @centroCustoRequerido = true })
                            </div>
                            <div class="row">
                                @Html.EditorFor(m => m.Material, "Material", new { @sectionClass = "col col-6", @required = true })
                                <section class="col col-6">
                                    @Html.LabelFor(m => m.Complemento, new { @class = "label" })
                                    <label class="input">
                                        @Html.TextBoxFor(m => m.Complemento)
                                    </label>
                                    @Html.ValidationMessageFor(m => m.Complemento, "", new { @class = "note note-error" })
                                </section>
                            </div>
                            <div class="row">
                                <section class="col col-2">
                                    @Html.LabelFor(m => m.Quantidade, new { @class = "label" })
                                    <label class="input">
                                        @Html.TextBoxFor(m => m.Quantidade, "{0:F4}", new { @class = "text-right decimal-4-casas required" })
                                        <script type="text/javascript">
                                            $(document).ready(function () {
                                                $("#@Html.IdFor(m => m.Quantidade)").on("focusout", function () {
                                                    $("#@Html.IdFor(m => m.QuantidadeAprovada)").val(roundDecimal($(this).val(), 4));
                                                });
                                            });
                                        </script>
                                    </label>
                                    @Html.ValidationMessageFor(m => m.Quantidade, "", new { @class = "note note-error" })
                                </section>
                                <section class="col col-2">
                                    @Html.LabelFor(m => m.QuantidadeAprovada, new { @class = "label" })
                                    <label class="input">
                                        @Html.TextBoxFor(m => m.QuantidadeAprovada, "{0:F4}", new { @class = "text-right decimal-4-casas readonly", @readonly = "" })
                                    </label>
                                    @Html.ValidationMessageFor(m => m.QuantidadeAprovada, "", new { @class = "note note-error" })
                                </section>

                                <section class="col col-3">
                                    @Html.LabelFor(m => m.DataMinima, new { @class = "label" })
                                    <label class="input">
                                        <i class="icon-append fa fa-calendar"></i>
                                        @Html.TextBoxFor(m => m.DataMinima, "{0:dd/MM/yyyy}")
                                    </label>
                                    @Html.ValidationMessageFor(m => m.DataMinima, "Informe uma data válida.", new { @class = "note note-error" })
                                </section>
                                <section class="col col-2">
                                    @Html.LabelFor(m => m.Prazo, new { @class = "label" })
                                    <label class="input">
                                        @Html.TextBoxFor(m => m.Prazo, new { @class = "text-right numeric" })
                                    </label>
                                    @Html.ValidationMessageFor(m => m.Prazo, "", new { @class = "note note-error" })
                                </section>
                                <section class="col col-3">
                                    @Html.LabelFor(m => m.DataMaxima, new { @class = "label" })
                                    <label class="input">
                                        <i class="icon-append fa fa-calendar"></i>
                                        @Html.TextBoxFor(m => m.DataMaxima, "{0:dd/MM/yyyy}")
                                    </label>
                                    @Html.ValidationMessageFor(m => m.DataMaxima, "Informe uma data válida.", new { @class = "note note-error" })
                                </section>
                                <script type="text/javascript">
                                    $(document).ready(function () {
                                        $('#@Html.IdFor(m => m.DataMinima)').datepicker({
                                            prevText: '<i class="fa fa-chevron-left"></i>',
                                            nextText: '<i class="fa fa-chevron-right"></i>',
                                            changeMonth: true,
                                            changeYear: true,
                                            onClose: function (selectedDate) {
                                                $('#@Html.IdFor(m => m.DataMaxima)').datepicker('option', 'minDate', selectedDate);
                                            }
                                        });

                                        $('#@Html.IdFor(m => m.DataMaxima)').datepicker({
                                            prevText: '<i class="fa fa-chevron-left"></i>',
                                            nextText: '<i class="fa fa-chevron-right"></i>',
                                            changeMonth: true,
                                            changeYear: true,
                                            onClose: function (selectedDate) {
                                                $('#@Html.IdFor(m => m.DataMinima)').datepicker('option', 'maxDate', selectedDate);
                                            }
                                        });
                                    });
                                </script>
                            </div>
                            <div class="row">
                                <section class="col col-6">
                                    @{
                                        string disableBtnAddItem = string.Empty;
                                        if (!Model.PodeAdicionarItem)
                                        {
                                            disableBtnAddItem = "disabled";
                                        }
                                    }
                                    <button id="btnAddItem" type="button" class="btn btn-primary @disableBtnAddItem">
                                        Adicionar Item
                                    </button>

                                    @{
                                        string disableBtnCancelarItem = string.Empty;
                                        if (!Model.PodeCancelarItem)
                                        {
                                            disableBtnCancelarItem = "disabled";
                                        }
                                    }
                                    <button id="btnCancelarItem" type="button" class="btn btn-danger @disableBtnCancelarItem">
                                        Cancelar Item
                                    </button>
                                </section>
                            </div>
                            <div class="table-responsive" style="min-height: 115px; border: 1px solid #ddd; margin-bottom: 13px; overflow-x: auto;">
                                <table id="tableItens" class="table table-bordered table-striped table-condensed table-hover dataTable">
                                    <thead>
                                        <tr role="row">
                                            <th class="text-center" style="min-width: 65px;">Item pré RM</th>
                                            <th class="text-right">Material</th>
                                            <th>Descrição</th>
                                            <th>Complemento</th>
                                            <th class="text-center">UN</th>
                                            <th class="text-right">Quantidade</th>
                                            <th class="text-right">Qtd. aprovada</th>
                                            <th>Classe de despesa</th>
                                            <th>Centro de custo</th>
                                            <th class="text-center" style="min-width: 70px;">Data mínima</th>
                                            <th class="text-center" style="min-width: 70px;">Data máxima</th>
                                            <th>Situação</th>
                                            <th class="text-center">RM gerada</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    </tbody>
                                </table>
                            </div>
                        </fieldset>
                        <fieldset>
                            <div class="row">
                                <section class="col col-6">
                                    @Html.LabelFor(m => m.PreRequisicaoMaterial.Observacao, new { @class = "label" })
                                    <label class="textarea">
                                        @Html.TextAreaFor(m => m.PreRequisicaoMaterial.Observacao, new { rows = 5, style = "height:104px;" })
                                    </label>
                                    @Html.ValidationMessageFor(m => m.PreRequisicaoMaterial.Observacao, "", new { @class = "note note-error" })
                                </section>
                                <section class="col col-6" style="padding: 0;">
                                    <section class="col col-12" style="padding: 0; margin: 0;">
                                        <section class="col col-6">
                                            @Html.LabelFor(m => m.PreRequisicaoMaterial.LoginUsuarioCadastro, new { @class = "label" })
                                            <label class="input">
                                                @Html.TextBoxFor(m => m.PreRequisicaoMaterial.LoginUsuarioCadastro, new { @readonly = "", @class = "readonly" })
                                            </label>
                                        </section>
                                        <section class="col col-6">
                                            @Html.LabelFor(m => m.PreRequisicaoMaterial.DataCadastro, new { @class = "label" })
                                            <label class="input">
                                                <i class="icon-append fa fa-calendar"></i>
                                                @Html.TextBoxFor(m => m.PreRequisicaoMaterial.DataCadastro, "{0:dd/MM/yyyy}", new { @readonly = "", @class = "readonly" })
                                            </label>
                                        </section>
                                    </section>
                                    <section class="col col-12" style="padding: 0; margin: 0;">
                                        <section class="col col-6">
                                            @Html.LabelFor(m => m.PreRequisicaoMaterial.LoginUsuarioCancelamento, new { @class = "label" })
                                            <label class="input">
                                                @Html.TextBoxFor(m => m.PreRequisicaoMaterial.LoginUsuarioCancelamento, new { @readonly = "", @class = "readonly" })
                                            </label>
                                        </section>
                                        <section class="col col-6">
                                            @Html.LabelFor(m => m.PreRequisicaoMaterial.DataCancelamento, new { @class = "label" })
                                            <label class="input">
                                                <i class="icon-append fa fa-calendar"></i>
                                                @Html.TextBoxFor(m => m.PreRequisicaoMaterial.DataCancelamento, "{0:dd/MM/yyyy}", new { @readonly = "", @class = "readonly" })
                                            </label>
                                        </section>
                                    </section>
                                </section>
                            </div>
                        </fieldset>
                        <footer>
                            @Html.ActionLink("Voltar", "Index", null, null, new { @class = "btn btn-primary" })
                            @{
                                string disableBtnCancelar = string.Empty;
                                if (!Model.PodeCancelar)
                                {
                                    disableBtnCancelar = "disabled";
                                }
                            }
                            <a data-toggle="modal" href="#MotivoCancelamento_ModalPanel" class="btn btn-danger @disableBtnCancelar">Cancelar</a>
                            @if (Model.PodeCancelar) {
                                <div class="modal fade" id="MotivoCancelamento_ModalPanel" tabindex="-1" role="dialog">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                                                    &times;
                                                </button>
                                                <h4 class="modal-title">
                                                    Motivo do Cancelamento
                                                </h4>
                                            </div>
                                            <div class="modal-body">
                                                <label class="textarea">
                                                    @Html.TextAreaFor(m => m.PreRequisicaoMaterial.MotivoCancelamento, new { @rows = "3" })
                                                </label>
                                            </div>
                                            <div class="modal-footer">
								                <button type="button" id="btnCancelarPreRequisicao" class="btn btn-primary">
									                Ok
								                </button>
							                </div>
                                        </div>
                                    </div>
                                    <script type="text/javascript">
                                        $("#btnCancelarPreRequisicao").on("click", function () {
                                            var motivo = $("#@Html.IdFor(m => m.PreRequisicaoMaterial.MotivoCancelamento)").val();
                                            if (motivo.length != 0) {
                                                $.ajax({
                                                    type: 'POST',
                                                    url: '@Url.Action("Cancelar", "PreRequisicaoMaterial")',
                                                    cache: false,
                                                    async: false,
                                                    contentType: 'application/json; charset=utf-8',
                                                    data: JSON.stringify({
                                                        id: '@Html.DisplayFor(l => l.PreRequisicaoMaterial.Id)',
                                                        motivo: motivo
                                                    })
                                                })
                                                .success(function (result) {
                                                    $('#notificationMessages').html(result);
                                                });
                                            }
                                            else
                                                smartAlert("Erro", "@GIR.Sigim.Application.Resource.OrdemCompra.ErrorMessages.InformeMotivoCancelamentoPreRequisicao", "error");
                                        });
                                    </script>
                                </div>
                            }

                            @{
                                var url = Url.Action("Imprimir", "PreRequisicaoMaterial") + "/" + @Html.DisplayFor(l => l.PreRequisicaoMaterial.Id);
                            }
                            @Html.EditorFor(m => m.PodeImprimir, "Imprimir", new { @url = url } )
                            
                            @{
                                string disableBtnSalvar = string.Empty;
                                if (!Model.PodeSalvar)
                                {
                                    disableBtnSalvar = "disabled";
                                }
                            }
                            <button id="btnSalvar" type="submit" class="btn btn-primary right @disableBtnSalvar">
                                Salvar
                            </button>
                        </footer>
                    }
                </div>
            </div>
        </div>
    </article>
</div>

<script type="text/javascript">
    jsonItemArray = JSON.parse($("#@Html.IdFor(m => m.JsonItens)").val());

    $(document).ready(function () {
        fillTable();

        jQuery.validator.setDefaults({
            ignore: '#formItem *'
        });

        $('#btnAddItem').on("click", function () {
            if ($('#formItem input').valid()) {
                if (!ehItemRepetido()) {
                    addItem();
                }
                else {
                    smartAlert("Erro", "Esse material e essa classe já foram adicionados para esse centro de custo.", "error");
                }
            }
        });

        $('#btnCancelarItem').on("click", function () {
            cancelarItensSelecionados();
        });

        $('#btnAprovarItem').on("click", function () {
            aprovarItensSelecionados();
        });

        jQuery.validator.addMethod(
            "ehCentroCustoValido",
            function (value, element, params) {
                var isValid = validaCentroCusto();
                $.validator.messages.ehCentroCustoValido = $('#@Html.IdFor(m => m.CentroCusto.Codigo)_ValidationMessage').html();
                return isValid;
            }, ''
        );

        jQuery.validator.addMethod(
            "ehClasseValida",
            function (value, element, params) {
                var isValid = validaClasse();
                $.validator.messages.ehClasseValida = $('#@Html.IdFor(m => m.Classe.Codigo)_ValidationMessage').html();
                return isValid;
            }, ''
        );

        $('#formCadastro').validate({
            rules: {
                '@Html.NameFor(m => m.PreRequisicaoMaterial.Data)': {
                    required: true,
                    date: true
                },
                '@Html.NameFor(m => m.CentroCusto.Codigo)': {
                    required: true,
                    ehCentroCustoValido: true
                },
                '@Html.NameFor(m => m.Classe.Codigo)': {
                    required: true,
                    ehClasseValida: true
                },
                '@Html.NameFor(m => m.Material.Id)': "required",
                '@Html.NameFor(m => m.Quantidade)': "decimalGreaterThanZero",
                '@Html.NameFor(m => m.DataMinima)': "date",
                '@Html.NameFor(m => m.DataMaxima)': "date"
            },
            messages: {
                '@Html.NameFor(m => m.PreRequisicaoMaterial.Data)': {
                    required: '@GIR.Sigim.Application.Resource.Sigim.ErrorMessages.InformeDataValida',
                    date: '@GIR.Sigim.Application.Resource.Sigim.ErrorMessages.InformeDataValida'
                },
                '@Html.NameFor(m => m.CentroCusto.Codigo)': {
                    required: '@string.Format(GIR.Sigim.Application.Resource.Sigim.ErrorMessages.CampoObrigatorio, "Centro de Custo")'
                },
                '@Html.NameFor(m => m.Classe.Codigo)': {
                    required: '@string.Format(GIR.Sigim.Application.Resource.Sigim.ErrorMessages.CampoObrigatorio, "Classe")'
                },
                '@Html.NameFor(m => m.Material.Id)': {
                    required: '@string.Format(GIR.Sigim.Application.Resource.Sigim.ErrorMessages.CampoObrigatorio, "Material")'
                },
                '@Html.NameFor(m => m.Quantidade)': {
                    decimalGreaterThanZero: "A Quantidade deve ser maior que zero."
                },
                '@Html.NameFor(m => m.DataMinima)': {
                    date: '@GIR.Sigim.Application.Resource.Sigim.ErrorMessages.InformeDataValida'
                },
                '@Html.NameFor(m => m.DataMaxima)': {
                    date: '@GIR.Sigim.Application.Resource.Sigim.ErrorMessages.InformeDataValida'
                }
            },
            errorPlacement: function (error, element) {
                var span = getErrorMessageContainer(element.attr("name"));
                span.html(error.append());
            },
            highlight: function (element, errorClass) {
                var span = getErrorMessageContainer($(element).attr("name"));
                span.removeClass("field-validation-valid");
                span.addClass("field-validation-error");
            },
            unhighlight: function (element, errorClass) {
                var span = getErrorMessageContainer($(element).attr("name"));
                span.removeClass("field-validation-error");
                span.addClass("field-validation-valid");
            }
        });
    });

    function fillTable() {
        $("#tableItens tbody").empty();
        for (var i = 0; i < jsonItemArray.length; i++) {
            var row = $('<tr />')
            $("#tableItens tbody").append(row);

            var chkDisabled = '';
            var labelClass = 'checkbox';
            if (jsonItemArray[i].Situacao != 0) { //Requisitado
                chkDisabled = 'disabled';
                labelClass += ' state-disabled';
            }
            row.append($('<td><label class="' + labelClass + '"><input type="checkbox" name="checkbox" value="' + jsonItemArray[i].Sequencial + '" ' + chkDisabled + '><i></i>' + jsonItemArray[i].Sequencial + '</label></td>'));

            row.append($('<td class="text-right">' + jsonItemArray[i].Material.Id + '</td>'));
            @if (Model.PodeEditarItem)
	        {
                @:if (jsonItemArray[i].Situacao == 0) //Requisitado
		        @:row.append($('<td class="text-nowrap" onclick="loadItem(' + jsonItemArray[i].Sequencial + ');">' + jsonItemArray[i].Material.Descricao + '</td>'));
                @:else
                @:row.append($('<td class="text-nowrap">' + jsonItemArray[i].Material.Descricao + '</td>'));
	        }
            else
            {
                @:row.append($('<td class="text-nowrap">' + jsonItemArray[i].Material.Descricao + '</td>'));
            }
            row.append($('<td>' + jsonItemArray[i].Complemento + '</td>'));
            row.append($('<td>' + jsonItemArray[i].Material.SiglaUnidadeMedida + '</td>'));
            row.append($('<td class="text-right">' + roundDecimal(floatToString(jsonItemArray[i].Quantidade), 4) + '</td>'));
            row.append($('<td class="text-right">' + roundDecimal(floatToString(jsonItemArray[i].QuantidadeAprovada), 4) + '</td>'));
            row.append($('<td class="text-nowrap">' + jsonItemArray[i].Classe.Codigo + " - " + jsonItemArray[i].Classe.Descricao + '</td>'));
            row.append($('<td class="text-nowrap">' + jsonItemArray[i].CentroCusto.Codigo + " - " + jsonItemArray[i].CentroCusto.Descricao + '</td>'));
            row.append($('<td>' + new Date(jsonItemArray[i].DataMinima).toFormatDDMMYYYY() + '</td>'));
            row.append($('<td>' + new Date(jsonItemArray[i].DataMaxima).toFormatDDMMYYYY() + '</td>'));
            row.append($('<td>' + jsonItemArray[i].SituacaoDescricao + '</td>'));
            var rmGerada = "&nbsp;";
            if (jsonItemArray[i].ListaRequisicaoMaterialItem.length > 0)
                rmGerada = jsonItemArray[i].ListaRequisicaoMaterialItem[0].RequisicaoMaterialId;
            row.append($('<td class="text-center">' + rmGerada + '</td>'));
        }
    }

    function ehItemRepetido() {
        var result = false;
        $.each(jsonItemArray, function (i, obj) {
            var ehMesmoMaterial = (obj.Material.Id == $('#@Html.IdFor(m => m.Material.Id)').val());
            var ehMesmaClasse = (obj.Classe.Codigo == $('#@Html.IdFor(m => m.Classe.Codigo)').val());
            var ehMesmoCentroCusto = (obj.CentroCusto.Codigo == $('#@Html.IdFor(m => m.CentroCusto.Codigo)').val());
            var ehMesmoSequencial = (obj.Sequencial == $('#@Html.IdFor(m => m.Sequencial)').val());

            if (ehMesmoMaterial && ehMesmaClasse && ehMesmoCentroCusto && !ehMesmoSequencial) {
                result = true;
                return false;
            }
        });
        return result;
    }

    function loadItem(sequancial) {
        var arr = jQuery.grep(jsonItemArray, function (item, i) {
            return (item.Sequencial == sequancial);
        });

        if (arr.length > 0) {
            var item = arr[0];
            $("#@Html.IdFor(m => m.ItemId)").val(item.Id);
            $("#@Html.IdFor(m => m.Sequencial)").val(item.Sequencial);
            $("#@Html.IdFor(m => m.CentroCusto.Codigo)").val(item.CentroCusto.Codigo);
            $("#@Html.IdFor(m => m.CentroCusto.Descricao)").val(item.CentroCusto.Descricao);
            $("#@Html.IdFor(m => m.Classe.Codigo)").val(item.Classe.Codigo);
            $("#@Html.IdFor(m => m.Classe.Descricao)").val(item.Classe.Descricao);
            $("#@Html.IdFor(m => m.Material.Id)").val(item.Material.Id);
            $("#@Html.IdFor(m => m.Material.Descricao)").val(item.Material.Descricao);
            $("#@Html.IdFor(m => m.Material.SiglaUnidadeMedida)").val(item.UnidadeMedida);
            $("#@Html.IdFor(m => m.Complemento)").val(item.Complemento);
            $("#@Html.IdFor(m => m.Quantidade)").val(roundDecimal(floatToString(item.Quantidade), 4));
            $("#@Html.IdFor(m => m.QuantidadeAprovada)").val(roundDecimal(floatToString(item.QuantidadeAprovada), 4));
            $("#@Html.IdFor(m => m.DataMinima)").val(new Date(item.DataMinima).toFormatDDMMYYYY());
            $("#@Html.IdFor(m => m.DataMaxima)").val(new Date(item.DataMaxima).toFormatDDMMYYYY());
        }
    }

    function addItem() {
        var item = $("#formItem").toObject({ mode: 'combine', skipEmpty: false, nodeCallback: processData })

        if (item["@Html.IdFor(m => m.Sequencial)"] == '') {
            if (jsonItemArray.length == 0)
                item["@Html.IdFor(m => m.Sequencial)"] = 1;
            else
                item["@Html.IdFor(m => m.Sequencial)"] = Math.max.apply(Math, jsonItemArray.map(function (o) { return o.Sequencial; })) + 1;
        }

        item["Situacao"] = 0;
        item["SituacaoDescricao"] = "Requisitado";
        item["ListaRequisicaoMaterialItem"] = [];

        var index = -1;
        $.each(jsonItemArray, function (i, obj) {
            if ($('#@Html.IdFor(m => m.Sequencial)').val() == obj.Sequencial) {
                index = i;
                return false;
            }
        });
        
        if (index >= 0)
            jsonItemArray.splice(index, 1, item);
        else
            jsonItemArray.push(item);

        $("#@Html.IdFor(m => m.JsonItens)").val(JSON.stringify(jsonItemArray));
        fillTable();
        $("#@Html.IdFor(m => m.ItemId)").val('');
        $("#@Html.IdFor(m => m.Sequencial)").val('');
        limpaCentroCusto();
    }

    function cancelarItensSelecionados() {
        var arrSequencial = [];
        $('#tableItens input[type=checkbox]:checked').each(function () {
            arrSequencial.push(parseInt($(this).val()));
        });

        if (arrSequencial.length > 0) {
            $.each(jsonItemArray, function (i, obj) {
                if (jQuery.inArray(obj.Sequencial, arrSequencial) > -1) {
                    if (obj.Id == '')
                        jsonItemArray.splice(i, 1);
                    else {
                        obj.Situacao = 2;
                        obj.SituacaoDescricao = 'Cancelado';
                    }
                }
            });
            $("#@Html.IdFor(m => m.JsonItens)").val(JSON.stringify(jsonItemArray));
            fillTable();
        }
        else
            smartAlert("Erro", "Selecione pelo menos 1 item para cancelamento.", "error");
    }

    function aprovarItensSelecionados() {
        var itemInvalidoSelecionado = false;
        var arrSequencial = [];
        var arrItemId = [];
        $('#tableItens input[type=checkbox]:checked').each(function () {
            arrSequencial.push(parseInt($(this).val()));
        });

        if (arrSequencial.length > 0) {
            $.SmartMessageBox({
                title: "<i class='fa fa-question-circle txt-color-blue'></i> Confirma a aprovação dos itens selecionados?",
                content: "Esta ação não poderá ser revertida.",
                buttons: '[Não][Sim]'
            }, function (ButtonPressed) {
                if (ButtonPressed === "Sim") {

                    $.each(jsonItemArray, function (i, obj) {
                        if (jQuery.inArray(obj.Sequencial, arrSequencial) > -1) {
                            if (obj.Id == '') {
                                smartAlert("Erro", "O item " + obj.Sequencial + " ainda não foi salvo na pré requisição.", "error");
                                itemInvalidoSelecionado = true;
                            }
                            else {
                                arrItemId.push(parseInt(obj.Id));
                            }
                        }
                    });

                    if (!itemInvalidoSelecionado) {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Aprovar", "PreRequisicaoMaterial")',
                            cache: false,
                            async: false,
                            contentType: 'application/json; charset=utf-8',
                            data: JSON.stringify({
                                itens: arrItemId,
                                id: '@Model.PreRequisicaoMaterial.Id'
                            })
                        })
                        .success(function (result) {
                            $('#notificationMessages').html(result);
                        })
                    }
                }
            });
        }
        else
            smartAlert("Erro", "Selecione pelo menos 1 item para aprovação.", "error");
    }

    function limpaCentroCusto() {
        $("#@Html.IdFor(m => m.CentroCusto.Codigo)").val("");
        $("#@Html.IdFor(m => m.CentroCusto.Descricao)").val("");
    }

    function processData(node) {
        var fieldId = node.getAttribute ? node.getAttribute('id') : '';
        var fieldName = node.getAttribute ? node.getAttribute('name') : '';

        if (fieldName != '' && (fieldId == "@Html.IdFor(m => m.ItemId)")) {
            return { name: "Id", value: $("#@Html.IdFor(m => m.ItemId)").val() };
        }

        if (fieldName != '' && (fieldId == "@Html.IdFor(m => m.Quantidade)" || fieldId == "@Html.IdFor(m => m.QuantidadeAprovada)")) {
            var value = $("#" + fieldId).val();
            return { name: fieldName, value: parseFloat(value.toString().replace(".", "").replace(",", ".")) };
        }

        if (fieldName != '' && (fieldId == "@Html.IdFor(m => m.DataMinima)" || fieldId == "@Html.IdFor(m => m.DataMaxima)")) {
            var date = $("#" + fieldId).datepicker("getDate");
            var jsonDate = "";
            if (date != null) {
                date.setHours(0, -date.getTimezoneOffset(), 0, 0); //removing the timezone offset.
                jsonDate = date.toJSON();
            }
            return { name: fieldName, value: jsonDate };
        }

        return false;
    }
</script>