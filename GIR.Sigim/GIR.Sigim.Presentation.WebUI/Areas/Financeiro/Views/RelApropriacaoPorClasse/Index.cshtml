@using GIR.Sigim.Application.Adapter;
@using GIR.Sigim.Application.DTO.Sigim;

@model GIR.Sigim.Presentation.WebUI.Areas.Financeiro.ViewModel.RelApropriacaoPorClasseListaViewModel
@{
    ViewBag.Title = "Apropriação por classe";
}

@Html.Partial("_NotificationMessagesPartial")
<div class="row">
    <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable centerBox">
        <div class="jarviswidget" id="wid-id-1" data-widget-editbutton="false" data-widget-custombutton="false">
            <header>
                <span class="widget-icon"><i class="fa fa-cog"></i></span>
                <h2>@ViewBag.Title</h2>
            </header>
            <div>
                <div class="widget-body no-padding">
                    <div id="resultadoBusca"></div>
                    @using (Ajax.BeginForm(
                        "Imprimir",
                        "RelApropriacaoPorClasse",
                        null,
                        new AjaxOptions() { InsertionMode = InsertionMode.Replace, HttpMethod = "POST", OnSuccess = "onSuccess", UpdateTargetId = "resultadoBusca" },
                        new { @id = "formFilter" + Model.Filtro.PaginationParameters.UniqueIdentifier, @class = "smart-form client-form", @novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.Filtro.PaginationParameters.PageIndex)
                        @Html.HiddenFor(m => m.Filtro.PaginationParameters.PageSize)
                        @Html.HiddenFor(m => m.Filtro.PaginationParameters.OrderBy)
                        @Html.HiddenFor(m => m.Filtro.PaginationParameters.Ascending)
                        @Html.HiddenFor(m => m.Filtro.PaginationParameters.UniqueIdentifier)
                        <div class="panel-group smart-accordion-default" id="accordion">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a data-toggle="collapse" data-parent="#accordion" href="#collapseFiltro" class="">
                                            <i class="fa fa-lg fa-angle-down pull-right"></i>
                                            <i class="fa fa-lg fa-angle-up pull-right"></i>
                                            Filtro
                                        </a>
                                    </h4>
                                </div>
                                <div id="collapseFiltro" class="panel-collapse collapse in">
                                    <div class="panel-body no-padding">
                                        <fieldset>
                                            @*<legend></legend>*@
                                            <div class="row">
                                                <section class="col col-3">
                                                    @Html.LabelFor(m => m.Filtro.DataInicial, new { @class = "label" })
                                                    <label class="input">
                                                        <i class="icon-append fa fa-calendar"></i>
                                                        @Html.TextBoxFor(m => m.Filtro.DataInicial, "{0:dd/MM/yyyy}")
                                                    </label>
                                                    @Html.ValidationMessageFor(m => m.Filtro.DataInicial, "Informe uma data válida.", new { @class = "note note-error" })
                                                </section>
                                                <section class="col col-3">
                                                    @Html.LabelFor(m => m.Filtro.DataFinal, new { @class = "label" })
                                                    <label class="input">
                                                        <i class="icon-append fa fa-calendar"></i>
                                                        @Html.TextBoxFor(m => m.Filtro.DataFinal, "{0:dd/MM/yyyy}")
                                                    </label>
                                                    @Html.ValidationMessageFor(m => m.Filtro.DataFinal, "Informe uma data válida.", new { @class = "note note-error" })
                                                </section>
                                                <script type="text/javascript">
                                                    $(document).ready(function () {
                                                        $('#@Html.IdFor(m => m.Filtro.DataInicial)').datepicker({
                                                            prevText: '<i class="fa fa-chevron-left"></i>',
                                                            nextText: '<i class="fa fa-chevron-right"></i>',
                                                            changeMonth: true,
                                                            changeYear: true,
                                                            onClose: function (selectedDate) {
                                                                if (selectedDate == '') {
                                                                    $(this).datepicker('disable');
                                                                    $(this).datepicker('setDate', new Date());
                                                                    $(this).datepicker('enable');
                                                                    selectedDate = new Date();
                                                                }
                                                            }
                                                        });

                                                        $('#@Html.IdFor(m => m.Filtro.DataFinal)').datepicker({
                                                            prevText: '<i class="fa fa-chevron-left"></i>',
                                                            nextText: '<i class="fa fa-chevron-right"></i>',
                                                            changeMonth: true,
                                                            changeYear: true,
                                                            onClose: function (selectedDate) {
                                                                if (selectedDate == '') {
                                                                    $(this).datepicker('disable');
                                                                    $(this).datepicker('setDate', new Date());
                                                                    $(this).datepicker('enable');
                                                                    selectedDate = new Date();
                                                                }
                                                            }
                                                        });
                                                    });
                                                </script>
                                            </div>
                                            <div class="row">
                                                @Html.EditorFor(m => m.Filtro.CentroCusto, "CentroCusto", new { @sectionClass = "col col-6", @labelText = "Centro de Custo", @required = true })
                                            </div>
                                            <div class="row">
                                                <section class="col col-12"> 
                                                    <div class="inline-group">
                                                        @foreach (var item in Model.ListaOpcoesRelatorio)
                                                        {
                                                            string idOpcoesRelatorio = "rbtOpcoesRelatorio" + item.Value; 
                                                            <label id="lblOpcoesRelatorio@(item.Value)" class="radio">@Html.RadioButtonFor(m => m.Filtro.OpcoesRelatorio, @item.Value, new { @id=@idOpcoesRelatorio})<i></i>@item.Text</label>
                                                        }
									                </div>
								                </section>
                                            </div>
                                            <div class="row">
                                                <section class="col col-12">
                                                    <div class="inline-group">
                                                        <label id="lblTipoPesquisaPorCompetencia" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhTipoPesquisaPorCompetencia)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhTipoPesquisaPorCompetencia)</label>
                                                        <label id="lblTipoPesquisaPorEmissao" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhTipoPesquisaPorEmissao)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhTipoPesquisaPorEmissao)</label>
                                                    </div>
                                                </section>
                                            </div>
                                            <fieldset id="formItensClasseDespesa">
                                                @*<legend></legend>*@
                                                <div class="row">
                                                    <section class="col col-12">
                                                        <header>Contas a pagar</header>
                                                    </section>
                                                    @Html.EditorFor(m => m.ClasseDespesa, "Classe", new { @sectionClass = "col col-6", @labelText = "Classe" })
                                                </div>
                                                <div class="row">
                                                    <section class="col col-6">
                                                        <button id="btnAddClasseDespesa" type="button" class="btn btn-primary">
                                                            Adicionar
                                                        </button>
                                                        <button id="btnRemoverClasseDespesa" type="button" class="btn btn-danger">
                                                            Remover
                                                        </button>
                                                    </section>
                                                </div>
                                                @Html.HiddenFor(m => m.JsonItensClasseDespesa)
                                                <div class="table-responsive" style="min-height: 115px; height:135px; border: 1px solid #ddd; margin-bottom: 13px; width:100%; overflow: auto;">
                                                    <table id="tableItensClasseDespesa" class="table table-bordered table-striped table-condensed table-hover dataTable">
                                                        <thead>
                                                            <tr role="row">
                                                                <th>Código</th>
                                                                <th>Descrição</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </fieldset>
                                            <div class="row">
                                                <section class="col col-12">
                                                    <div class="inline-group">
                                                        <label id="lblMovimentoDeDebito" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhMovimentoDebito)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhMovimentoDebito)</label>
                                                        <label id="lblMovimentoDeDebitoCaixa" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhMovimentoDebitoCaixa)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhMovimentoDebitoCaixa)</label>
                                                    </div>
                                                </section>
                                            </div>
                                            <div class="row">
                                                <section class="col col-12">
                                                    <h5>Situação</h5>
                                                    <div class="inline-group">
                                                        <label id="lblSituacaoTituloAPagarProvisionado" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAPagarProvisionado)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAPagarProvisionado)</label>
                                                        <label id="lblSituacaoTituloAPagarAguardandoLiberacao" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAPagarAguardandoLiberacao)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAPagarAguardandoLiberacao)</label>
                                                        <label id="lblSituacaoTituloAPagarLiberado" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAPagarLiberado)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAPagarLiberado)</label>
                                                        <label id="lblSituacaoTituloAPagarEmitido" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAPagarEmitido)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAPagarEmitido)</label>
                                                        <label id="lblSituacaoTituloAPagarPago" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAPagarPago)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAPagarPago)</label>
                                                        <label id="lblSituacaoTituloAPagarBaixado" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAPagarBaixado)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAPagarBaixado)</label>
                                                        <label id="lblSituacaoTituloAPagarCancelado" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAPagarCancelado)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAPagarCancelado)</label>
                                                    </div>
                                                </section>
                                            </div>
                                            <fieldset id="formItensClasseReceita">
                                                @*<legend></legend>*@
                                                <div class="row">
                                                    <section class="col col-12">
                                                        <header>Contas a receber</header>
                                                    </section>
                                                    @Html.EditorFor(m => m.ClasseReceita, "Classe", new { @sectionClass = "col col-6", @labelText = "Classe" })
                                                </div>
                                                <div class="row">
                                                    <section class="col col-6">
                                                        <button id="btnAddClasseReceita" type="button" class="btn btn-primary">
                                                            Adicionar
                                                        </button>
                                                        <button id="btnRemoverClasseReceita" type="button" class="btn btn-danger">
                                                            Remover
                                                        </button>
                                                    </section>
                                                </div>
                                                @Html.HiddenFor(m => m.JsonItensClasseReceita)
                                                <div class="table-responsive" style="min-height: 115px; height:135px; border: 1px solid #ddd; margin-bottom: 13px; width:100%; overflow: auto;">
                                                    <table id="tableItensClasseReceita" class="table table-bordered table-striped table-condensed table-hover dataTable">
                                                        <thead>
                                                            <tr role="row">
                                                                <th>Código</th>
                                                                <th>Descrição</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </fieldset>
                                            <div class="row">
                                                <section class="col col-12">
                                                    <div class="inline-group">
                                                        <label id="lblMovimentoDeCredito" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhMovimentoCredito)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhMovimentoCredito)</label>
                                                        <label id="lblMovimentoDeCreditoCaixa" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhMovimentoCreditoCaixa)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhMovimentoCreditoCaixa)</label>
                                                        <label id="lblCreditoCobranca" class="checkbox state-disabled">@Html.CheckBoxFor(m => m.Filtro.EhMovimentoCreditoCobranca)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhMovimentoCreditoCobranca)</label>
                                                    </div>
                                                </section>
                                            </div>
                                            <div class="row">
                                                <section class="col col-12">
                                                    <h5>Situação</h5>
                                                    <div class="inline-group">
                                                        <label id="lblSituacaoTituloAReceberProvisionado" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAReceberProvisionado)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAReceberProvisionado)</label>
                                                        <label id="lblSituacaoTituloAReceberAFaturar" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAReceberAFatura)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAReceberAFatura)</label>
                                                        <label id="lblSituacaoTituloAReceberFaturado" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAReceberFaturado)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAReceberFaturado)</label>
                                                        <label id="lblSituacaoTituloAReceberPredatado" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAReceberPreDatado)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAReceberPreDatado)</label>
                                                        <label id="lblSituacaoTituloAReceberRecebido" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAReceberRecebido)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAReceberRecebido)</label>
                                                        <label id="lblSituacaoTituloAReceberQuitado" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAReceberQuitado)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAReceberQuitado)</label>
                                                        <label id="lblSituacaoTituloAReceberCancelado" class="checkbox">@Html.CheckBoxFor(m => m.Filtro.EhSituacaoAReceberCancelado)<i></i>@Html.DisplayNameFor(m => m.Filtro.EhSituacaoAReceberCancelado)</label>
                                                    </div>
                                                </section>
                                            </div>
                                        </fieldset>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <footer>
                            @{
                                string disableBtnImprimir = string.Empty;
                                if (!Model.PodeImprimir)
                                {
                                    disableBtnImprimir = "disabled";
                                }
                            }
                            <button id="btnImprimirFake" type="submit" class="btn btn-primary right @disableBtnImprimir">
                                Imprimir
                            </button>

                            @{
                            var url = Url.Action("Imprimir", "RelApropriacaoPorClasse");
                            }

                            <a data-toggle="modal" href="#FormatoImpressao_ModalPanel" id="btnImprimir"></a>
                            <div class="modal fade" id="FormatoImpressao_ModalPanel" tabindex="-1" role="dialog">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                                                &times;
                                            </button>
                                            <h4 class="modal-title">
                                                Formato do Arquivo para Impressão
                                            </h4>
                                        </div>
                                        <div class="modal-body">
                                            <div class="row">
                                                <div class="col col-12">
                                                    @{
                                                        var listaFormatoExportacaoArquivo = new SelectList(typeof(FormatoExportacaoArquivo).ToItemListaDTO(), "Id", "Descricao", (int)FormatoExportacaoArquivo.PDF);
                                                        foreach (var item in listaFormatoExportacaoArquivo)
	                                                    {
                                                            var itemChecked = string.Empty;
                                                            if (item.Selected)
                                                            {
                                                                itemChecked = "checked=\"checked\"";
                                                            }
                                                            @:<label class="radio">
							                                @:  <input type="radio" name="formatoExportacaoArquivo" value="@item.Value" @itemChecked>
							                                @:  <i></i>@item.Text
                                                            @:</label>
	                                                    }
                                                    }
					                            </div>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
					                        <button type="button" id="btnConfirmarImpressao" class="btn btn-primary" data-dismiss="modal">
						                        Ok
					                        </button>
				                        </div>
                                    </div>
                                </div>
                                <script type="text/javascript">
                                    var parametrosUrlImpressao = '';
                                    $(document).ready(function () {
                                        $(document).on("show.bs.modal", "#FormatoImpressao_ModalPanel", function (e) {
                                            $.event.trigger({
                                                type: "showFormatoImpressaoModalPanel",
                                                event: e
                                            });
                                        });

                                        $("#btnConfirmarImpressao").on("click", function () {
                                            window.open('@url?formato=' + $("input:radio[name=formatoExportacaoArquivo]:checked").val() + parametrosUrlImpressao);
                                        });
                                    });
                                </script>
                            </div>

                        </footer>
                    }
                    @*<div id="resultadoBusca"></div>*@
                </div>
            </div>
        </div>
    </article>
</div>
@section scripts{
    @Html.EditorFor(m => m.Filtro.PaginationParameters, "ListPageScript");
}

<script type="text/javascript">
    jsonItemArrayClasseDespesa = JSON.parse($("#@Html.IdFor(m => m.JsonItensClasseDespesa)").val());
    jsonItemArrayClasseReceita = JSON.parse($("#@Html.IdFor(m => m.JsonItensClasseReceita)").val());

    $(document).ready(function () {
        $('body').addClass("hidden-menu");

        jQuery.validator.setDefaults({
            ignore: '#formItensClasseDespesa *, #formItensClasseReceita *'
        });

        $('#btnAddClasseDespesa').on("click", function () {
            if ($('#formItensClasseDespesa input').valid()) {
                if (validaAdicionarClasseDespesa() == true) {
                    addClasseDespesa();
                }
            }
        });

        $('#btnRemoverClasseDespesa').on("click", function () {
            removerClasseDespesa();
        });

        $('#btnAddClasseReceita').on("click", function () {
            if ($('#formItensClasseReceita input').valid()) {
                if (validaAdicionarClasseReceita() == true) {
                    addClasseReceita();
                }
            }
        });

        $('#btnRemoverClasseReceita').on("click", function () {
            removerClasseReceita();
        });

        jQuery.validator.addMethod(
            "ehCentroCustoValido",
            function (value, element, params) {
                var isValid = validaCentroCusto();
                $.validator.messages.ehCentroCustoValido = $('#@Html.IdFor(m => m.Filtro.CentroCusto.Codigo)_ValidationMessage').html();
                return isValid;
            }, ''
        );

        jQuery.validator.addMethod(
            "ehClasseDespesaValida",
            function (value, element, params) {
                var isValid = validaClasse_@(Html.IdFor(m => m.ClasseDespesa.Codigo))();
                $.validator.messages.ehClasseDespesaValida = $('#@Html.IdFor(m => m.ClasseDespesa.Codigo)_ValidationMessage').html();
                return isValid;
            }, ''
        );

        jQuery.validator.addMethod(
            "ehClasseReceitaValida",
            function (value, element, params) {
                var isValid = validaClasse_@(Html.IdFor(m => m.ClasseReceita.Codigo))();
                $.validator.messages.ehClasseReceitaValida = $('#@Html.IdFor(m => m.ClasseReceita.Codigo)_ValidationMessage').html();
                return isValid;
            }, ''
        );

        $('#formFilter@(Model.Filtro.PaginationParameters.UniqueIdentifier)').validate({
            rules: {
                '@Html.NameFor(m => m.Filtro.DataInicial)': {
                    date: true
                },
                '@Html.NameFor(m => m.Filtro.DataFinal)': {
                    date: true
                },
                '@Html.NameFor(m => m.Filtro.CentroCusto.Codigo)': {
                    ehCentroCustoValido: true
                },
                '@Html.NameFor(m => m.ClasseDespesa.Codigo)': {
                    ehClasseDespesaValida: true
                },
                '@Html.NameFor(m => m.ClasseReceita.Codigo)': {
                    ehClasseReceitaValida: true
                }
            },
            messages: {
                '@Html.NameFor(m => m.Filtro.DataInicial)': {
                    date: '@GIR.Sigim.Application.Resource.Sigim.ErrorMessages.InformeDataValida'
                },
                '@Html.NameFor(m => m.Filtro.DataFinal)': {
                    date: '@GIR.Sigim.Application.Resource.Sigim.ErrorMessages.InformeDataValida'
                },
                '@Html.NameFor(m => m.Filtro.CentroCusto.Codigo)': {
                    required: '@string.Format(GIR.Sigim.Application.Resource.Sigim.ErrorMessages.CampoObrigatorio, "Centro de Custo")'
                }
            },
            errorPlacement: function (error, element) {
                var span = getErrorMessageContainer(element.attr("name"));
                span.html(error.append());
            },
            highlight: function (element, errorClass) {
                var span = getErrorMessageContainer($(element).attr("name"));
                span.removeClass("field-validation-valid");
                span.addClass("field-validation-error");
            },
            unhighlight: function (element, errorClass) {
                var span = getErrorMessageContainer($(element).attr("name"));
                span.removeClass("field-validation-error");
                span.addClass("field-validation-valid");
            }
        });

        $("#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorCompetencia)").on("change", function () {
            marcarDesmarcarTipoPesquisa();
        });

        $("#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorEmissao)").on("change", function () {
            marcarDesmarcarTipoPesquisa();
        });


        $("#@Html.IdFor(m => m.Filtro.EhSituacaoAReceberFaturado)").on("change", function () {
            habilitarDesabitarOpcaoCreditoCobranca();
        });

        $("#@Html.IdFor(m => m.Filtro.EhSituacaoAReceberRecebido)").on("change", function () {
            habilitarDesabitarOpcaoCreditoCobranca();
        });

        $("#@Html.IdFor(m => m.Filtro.EhSituacaoAReceberQuitado)").on("change", function () {
            habilitarDesabitarOpcaoCreditoCobranca();
        });

        $(document).on("showFormatoImpressaoModalPanel", function (e) {
            var dataInicial = $("#@Html.IdFor(m => m.Filtro.DataInicial)").val();
            var dataFinal = $("#@Html.IdFor(m => m.Filtro.DataFinal)").val();

            var centroCustoCodigo = $("#@Html.IdFor(m => m.Filtro.CentroCusto.Codigo)").val();

            if ((dataInicial == "") || (dataFinal == "")) {
                smartAlert("Atenção", "Informe o período !", "warning");
                e.event.preventDefault();
            }

            if ((dataInicial != "") && (dataFinal != "")) {
                if (compararDatas(dataInicial, dataFinal) > 0) {
                    smartAlert("Atenção", "Data inicial maior que data final !", "warning");
                    e.event.preventDefault();
                }
            }

            if (validaCentroDeCusto() == false) {
                e.event.preventDefault();
            }

        });

    });

    function processData(node) {
        var fieldId = node.getAttribute ? node.getAttribute('id') : '';
        var fieldName = node.getAttribute ? node.getAttribute('name') : '';

        return false;
    }

    function addClasseDespesa() {
        var item = $("#formItensClasseDespesa").toObject({ mode: 'combine', skipEmpty: false, nodeCallback: processData })

        jsonItemArrayClasseDespesa.push(item.ClasseDespesa);

        $("#@Html.IdFor(m => m.JsonItensClasseDespesa)").val(JSON.stringify(jsonItemArrayClasseDespesa));
        fillTableClasseDespesa();
        clearFormItemClasseDespesa();
    }

    function removerClasseDespesa() {
        var arrClasseDespesaCodigo = [];
        var index;
        $($('#tableItensClasseDespesa input[type=checkbox]:checked').get().reverse()).each(function () {
            index = parseInt($(this).val());
            arrClasseDespesaCodigo.push(index);
            jsonItemArrayClasseDespesa.splice(index, 1);
        });

        if (arrClasseDespesaCodigo.length > 0) {
            $("#@Html.IdFor(m => m.JsonItensClasseDespesa)").val(JSON.stringify(jsonItemArrayClasseDespesa));
            fillTableClasseDespesa();
        }
        else {
            smartAlert("Erro", "Selecione pelo menos uma classe de despesa para ser removida.", "error");
        }
    }

    function fillTableClasseDespesa() {
        $("#tableItensClasseDespesa tbody").empty();
        for (var i = 0; i < jsonItemArrayClasseDespesa.length; i++) {
            var row = $('<tr />')
            $("#tableItensClasseDespesa tbody").append(row);

            var chkDisabled = '';
            var labelClass = 'checkbox';
            row.append($('<td><label class="' + labelClass + '"><input type="checkbox" name="checkbox" value="' + i + '" ' + chkDisabled + '><i></i>' + jsonItemArrayClasseDespesa[i].Codigo + '</label></td>'));
            row.append($('<td class="text-left">' + jsonItemArrayClasseDespesa[i].Descricao + '</td>'));
        }
    }

    function clearFormItemClasseDespesa() {
        $("#@Html.IdFor(m => m.ClasseDespesa.Codigo)").val('');

        limpaClasseForm_@(Html.IdFor(m => m.ClasseDespesa.Codigo))();
    }

    function validaAdicionarClasseDespesa() {
        var result = true;
        if (($('#@Html.IdFor(m => m.ClasseDespesa.Codigo)').val() == '')) {
            result = false;
            smartAlert("Erro", "Informe a classe despesa.", "error");
            return false;
        }

        var ehValidoClasse = validaClasse_@(Html.IdFor(m => m.ClasseDespesa.Codigo))();
        if (!ehValidoClasse) {
            result = false;
            smartAlert("Erro", "Selecione uma classe cadastrada.", "error");
            return false;
        }

        $.each(jsonItemArrayClasseDespesa, function (index, obj) {
            var ehMesmaClasse = (obj.Codigo == $('#@Html.IdFor(m => m.ClasseDespesa.Codigo)').val());

            if (ehMesmaClasse) {
                result = false;
                smartAlert("Erro", "A classe informada já foi adicionada !", "error");
                return false;
            }

        });

        return result;
    }

    function validaCentroDeCusto() {
        var result = true;
        if (($('#@Html.IdFor(m => m.Filtro.CentroCusto.Codigo)').val() == '')) {
            result = false;
            smartAlert("Erro", "Informe o centro de custo.", "warning");
            return false;
        }

        var ehValidoCentroCusto = validaCentroCusto();
        if (!ehValidoCentroCusto) {
            result = false;
            smartAlert("Erro", "Selecione um centro de custo cadastrado.", "warning");
            return false;
        }

        return result;
    }

    function addClasseReceita() {
        var item = $("#formItensClasseReceita").toObject({ mode: 'combine', skipEmpty: false, nodeCallback: processData })

        jsonItemArrayClasseReceita.push(item.ClasseReceita);

        $("#@Html.IdFor(m => m.JsonItensClasseReceita)").val(JSON.stringify(jsonItemArrayClasseReceita));
        fillTableClasseReceita();
        clearFormItemClasseReceita();
    }

    function removerClasseReceita() {
        var arrClasseReceitaCodigo = [];
        var index;
        $($('#tableItensClasseReceita input[type=checkbox]:checked').get().reverse()).each(function () {
            index = parseInt($(this).val());
            arrClasseReceitaCodigo.push(index);
            jsonItemArrayClasseReceita.splice(index, 1);
        });

        if (arrClasseReceitaCodigo.length > 0) {
            $("#@Html.IdFor(m => m.JsonItensClasseReceita)").val(JSON.stringify(jsonItemArrayClasseReceita));
            fillTableClasseReceita();
        }
        else {
            smartAlert("Erro", "Selecione pelo menos uma classe de receita para ser removida.", "error");
        }
    }

    function fillTableClasseReceita() {
        $("#tableItensClasseReceita tbody").empty();
        for (var i = 0; i < jsonItemArrayClasseReceita.length; i++) {
            var row = $('<tr />')
            $("#tableItensClasseReceita tbody").append(row);

            var chkDisabled = '';
            var labelClass = 'checkbox';
            row.append($('<td><label class="' + labelClass + '"><input type="checkbox" name="checkbox" value="' + i + '" ' + chkDisabled + '><i></i>' + jsonItemArrayClasseReceita[i].Codigo + '</label></td>'));
            row.append($('<td class="text-left">' + jsonItemArrayClasseReceita[i].Descricao + '</td>'));
        }
    }

    function clearFormItemClasseReceita() {
        $("#@Html.IdFor(m => m.ClasseReceita.Codigo)").val('');

        limpaClasseForm_@(Html.IdFor(m => m.ClasseReceita.Codigo))();
    }

    function validaAdicionarClasseReceita() {
        var result = true;
        if (($('#@Html.IdFor(m => m.ClasseReceita.Codigo)').val() == '')) {
            result = false;
            smartAlert("Erro", "Informe a classe receita.", "error");
            return false;
        }

        var ehValidoClasse = validaClasse_@(Html.IdFor(m => m.ClasseReceita.Codigo))();
        if (!ehValidoClasse) {
            result = false;
            smartAlert("Erro", "Selecione uma classe cadastrada.", "error");
            return false;
        }

        $.each(jsonItemArrayClasseReceita, function (index, obj) {
            var ehMesmaClasse = (obj.Codigo == $('#@Html.IdFor(m => m.ClasseReceita.Codigo)').val());

            if (ehMesmaClasse) {
                result = false;
                smartAlert("Erro", "A classe informada já foi adicionada !", "error");
                return false;
            }

        });

        return result;
    }

    function habilitarDesabitarOpcaoCreditoCobranca() {
        var habilitar = false;
        habilitar = $("#@Html.IdFor(m => m.Filtro.EhSituacaoAReceberFaturado)").is(':checked');
        habilitar = habilitar || $("#@Html.IdFor(m => m.Filtro.EhSituacaoAReceberQuitado)").is(':checked');
        habilitar = habilitar || $("#@Html.IdFor(m => m.Filtro.EhSituacaoAReceberRecebido)").is(':checked');
        if (habilitar) {
            $('#@Html.IdFor(m => m.Filtro.EhMovimentoCreditoCobranca)').prop('disabled', '');
            $('#lblCreditoCobranca').removeClass("state-disabled");
        }
        else {
            $('#@Html.IdFor(m => m.Filtro.EhMovimentoCreditoCobranca)').prop('checked', false);
            $('#@Html.IdFor(m => m.Filtro.EhMovimentoCreditoCobranca)').prop('disabled', 'disabled');
            $('#lblCreditoCobranca').addClass("state-disabled");
        }
    }

    function marcarDesmarcarTipoPesquisa() {
        var marcadoCompetencia = false;
        var marcadoEmissao = false;

        marcadoCompetencia = $("#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorCompetencia)").is(':checked');
        marcadoEmissao = $("#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorEmissao)").is(':checked');

        if (marcadoCompetencia) {
            $('#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorEmissao)').prop('checked', false);
            $('#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorEmissao)').prop('disabled', 'disabled');
            $('#lblTipoPesquisaPorEmissao').addClass("state-disabled");
        }
        else {
            if (marcadoEmissao) {
                $('#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorCompetencia)').prop('checked', false);
                $('#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorCompetencia)').prop('disabled', 'disabled');
                $('#lblTipoPesquisaPorCompetencia').addClass("state-disabled");
            }
            else {
                $('#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorCompetencia)').prop('disabled', '');
                $('#@Html.IdFor(m => m.Filtro.EhTipoPesquisaPorEmissao)').prop('disabled', '');
                $('#lblTipoPesquisaPorCompetencia').removeClass("state-disabled");
                $('#lblTipoPesquisaPorEmissao').removeClass("state-disabled");
            }
        }
    }

    function executarImpressao() {

        $('#btnImprimir')[0].click();
        hideLoading();
    }
</script>